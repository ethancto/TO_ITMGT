{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6a825922-06a0-49e8-b674-1b4c44f7f1b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Programming Set 3\n",
    "\n",
    "This assignment will develop your ability to manipulate data.\n",
    "'''\n",
    "\n",
    "def relationship_status(from_member, to_member, social_graph):\n",
    "    '''Relationship Status.\n",
    "\n",
    "    Let us pretend that you are building a new app.\n",
    "    Your app supports social media functionality, which means that users can have\n",
    "    relationships with other users.\n",
    "\n",
    "    There are two guidelines for describing relationships on this social media app:\n",
    "    1. Any user can follow any other user.\n",
    "    2. If two users follow each other, they are considered friends.\n",
    "\n",
    "    This function describes the relationship that two users have with each other.\n",
    "\n",
    "    Please see \"set_3_sample_data.py\" for sample data. The social graph\n",
    "    will adhere to the same pattern.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    from_member: str\n",
    "        the subject member\n",
    "    to_member: str\n",
    "        the object member\n",
    "    social_graph: dict\n",
    "        the relationship data\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        \"follower\" if from_member follows to_member,\n",
    "        \"followed by\" if from_member is followed by to_member,\n",
    "        \"friends\" if from_member and to_member follow each other,\n",
    "        \"no relationship\" if neither from_member nor to_member follow each other.\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "\n",
    "    follow1 = to_member in social_graph.get(from_member, {}).get(\"following\",[])\n",
    "    follow2 = from_member in social_graph.get(to_member, {}).get(\"following\",[])\n",
    "\n",
    "    if follow1 and follow2:\n",
    "        return \"friends\"\n",
    "    elif follow1:\n",
    "        return \"follower\"\n",
    "    elif follow2:\n",
    "        return \"followed by\"\n",
    "    else:\n",
    "        return \"no relationship\"\n",
    "\n",
    "\n",
    "def tic_tac_toe(board):\n",
    "    '''Tic Tac Toe.\n",
    "\n",
    "    Tic Tac Toe is a common paper-and-pencil game.\n",
    "    Players must attempt to successfully draw a straight line of their symbol across a grid.\n",
    "    The player that does this first is considered the winner.\n",
    "\n",
    "    This function evaluates a tic tac toe board and returns the winner.\n",
    "\n",
    "    Please see \"set_3_sample_data.py\" for sample data. The board will adhere\n",
    "    to the same pattern. The board may by 3x3, 4x4, 5x5, or 6x6. The board will never\n",
    "    have more than one winner. The board will only ever have 2 unique symbols at the same time.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    board: list\n",
    "        the representation of the tic-tac-toe board as a square list of lists\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    str\n",
    "        the symbol of the winner or \"NO WINNER\" if there is no winner\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "    \n",
    "    boardsize = len(board)\n",
    "\n",
    "    for row in board:\n",
    "        firstXO = row[0]\n",
    "        if firstXO != \"\":\n",
    "            matchinarow = True\n",
    "            for i in range(1,boardsize):\n",
    "                if row[i] != firstXO:\n",
    "                    matchinarow = False\n",
    "                    break\n",
    "            if matchinarow:\n",
    "                return firstXO\n",
    "\n",
    "    for column in range(boardsize):\n",
    "        firstXO = board[0][column]\n",
    "        if firstXO != \"\":\n",
    "            matchinacolumn = True\n",
    "            for row in range(1,boardsize):\n",
    "                if board[row][column] != firstXO:\n",
    "                    matchinacolumn = False\n",
    "                    break\n",
    "            if matchinacolumn:\n",
    "                return firstXO\n",
    "\n",
    "    firstXO = board[0][0]\n",
    "    if firstXO != \"\":\n",
    "        matchinanegativeslopediagonal = True\n",
    "        for i in range(1,boardsize):\n",
    "            if board[i][i] != firstXO:\n",
    "                matchinanegativeslopediagonal = False\n",
    "                break\n",
    "        if matchinanegativeslopediagonal:\n",
    "            return firstXO\n",
    "\n",
    "    lastXO = board[0][boardsize-1]\n",
    "    if lastXO != \"\":\n",
    "        matchinapositiveslopediagonal = True\n",
    "        for i in range(1,boardsize):\n",
    "            if board[i][boardsize - 1 - i] != lastXO:\n",
    "                matchinapositiveslopediagonal = False\n",
    "                break\n",
    "        if matchinapositiveslopediagonal:\n",
    "            return lastXO\n",
    "\n",
    "    return \"NO WINNER\"\n",
    "    \n",
    "        \n",
    "\n",
    "def eta(first_stop, second_stop, route_map):\n",
    "    '''ETA.\n",
    "\n",
    "    A shuttle van service is tasked to travel along a predefined circlar route.\n",
    "    This route is divided into several legs between stops.\n",
    "    The route is one-way only, and it is fully connected to itself.\n",
    "\n",
    "    This function returns how long it will take the shuttle to arrive at a stop\n",
    "    after leaving another stop.\n",
    "\n",
    "    Please see \"set_3_sample_data.py\" for sample data. The route map will\n",
    "    adhere to the same pattern. The route map may contain more legs and more stops,\n",
    "    but it will always be one-way and fully enclosed.\n",
    "\n",
    "    Parameters\n",
    "    ----------\n",
    "    first_stop: str\n",
    "        the stop that the shuttle will leave\n",
    "    second_stop: str\n",
    "        the stop that the shuttle will arrive at\n",
    "    route_map: dict\n",
    "        the data describing the routes\n",
    "\n",
    "    Returns\n",
    "    -------\n",
    "    int\n",
    "        the time it will take the shuttle to travel from first_stop to second_stop\n",
    "    '''\n",
    "    # Replace `pass` with your code.\n",
    "    # Stay within the function. Only use the parameters as input. The function should return your answer.\n",
    "\n",
    "    timetaken = 0\n",
    "    currentstop = first_stop\n",
    "\n",
    "    while currentstop != second_stop:\n",
    "        for (start,end), leg in route_map.items():\n",
    "            if start == currentstop:\n",
    "                timetaken += leg[\"travel_time_mins\"]\n",
    "                currentstop = end\n",
    "                break\n",
    "    return timetaken"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1861c68d-1abd-4371-9d51-cd4c345b1de5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
